// Generated by IcedCoffeeScript 1.7.1-f
(function() {
  var AND, Expr, OR, Parser, URI, parse, urlmod,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  urlmod = require('url');

  Parser = require('./assertion_parser').Parser;

  Expr = (function() {
    function Expr() {}

    Expr.prototype.toString = function() {};

    return Expr;

  })();

  URI = (function(_super) {
    __extends(URI, _super);

    function URI(_arg) {
      this.key = _arg.key, this.value = _arg.value;
    }

    URI.parse = function(s) {
      var key, obj, value;
      obj = urlmod.parse(s);
      if (((key = obj.protocol) == null) || key.length === 0) {
        throw new Error("Bad URL, no 'protocol' found: " + s);
      } else if (key.slice(-1) === ':') {
        key = key.slice(0, -1);
      }
      if (((value = obj.hostname) == null) || value.length === 0) {
        throw new Error("Bad URL, no 'hostname' found: " + s);
      }
      return new URI({
        key: key,
        value: value
      });
    };

    URI.prototype.toString = function() {
      return "" + this.key + "://" + this.value;
    };

    return URI;

  })(Expr);

  AND = (function(_super) {
    __extends(AND, _super);

    function AND(a, b) {
      this.a = a;
      this.b = b;
    }

    AND.prototype.toString = function() {
      return "(" + (this.a.toString()) + " && " + (this.b.toString()) + ")";
    };

    return AND;

  })(Expr);

  OR = (function(_super) {
    __extends(OR, _super);

    function OR(a, b) {
      this.a = a;
      this.b = b;
    }

    OR.prototype.toString = function() {
      return "(" + (this.a.toString()) + " || " + (this.b.toString()) + ")";
    };

    return OR;

  })(Expr);

  exports.parse = parse = function(s) {
    var parser;
    parser = new Parser;
    parser.yy = {
      URI: URI,
      OR: OR,
      AND: AND
    };
    return console.log(parser.parse(s).toString());
  };

  parse("http://foo.com && a://b && c://d || twitter://shit || reddit://bar && github://foo && http://a1 && http://b2");

}).call(this);
