// Generated by IcedCoffeeScript 1.7.1-f
(function() {
  var AND, Expr, OR, Parser, URI, parse, urlmod,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  urlmod = require('url');

  Parser = require('./assertion_parser').Parser;

  Expr = (function() {
    function Expr() {}

    Expr.prototype.toString = function() {};

    return Expr;

  })();

  URI = (function(_super) {
    __extends(URI, _super);

    function URI(_arg) {
      this.key = _arg.key, this.value = _arg.value;
    }

    URI.parse = function(s) {
      var k, key, obj, value;
      obj = urlmod.parse(s);
      if (((key = obj.protocol) == null) || key.length === 0) {
        throw new Error("Bad URL, no 'protocol' found: " + s);
      } else if (key.slice(-1) === ':') {
        key = key.slice(0, -1);
      }
      if (((value = obj.hostname) == null) || value.length === 0) {
        throw new Error("Bad URL, no 'hostname' found: " + s);
      }
      if (key === 'web') {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(OR, (function() {
          var _i, _len, _ref, _results;
          _ref = ['http', 'https', 'dns'];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            k = _ref[_i];
            _results.push(new URI({
              key: k,
              value: value
            }));
          }
          return _results;
        })(), function(){});
      } else if (key === 'http') {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(OR, (function() {
          var _i, _len, _ref, _results;
          _ref = ['http', 'https'];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            k = _ref[_i];
            _results.push(new URI({
              key: k,
              value: value
            }));
          }
          return _results;
        })(), function(){});
      } else {
        return new URI({
          key: key,
          value: value
        });
      }
    };

    URI.prototype.toString = function() {
      return "" + this.key + "://" + this.value;
    };

    return URI;

  })(Expr);

  AND = (function(_super) {
    __extends(AND, _super);

    function AND() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.factors = args;
    }

    AND.prototype.toString = function() {
      var f;
      return "(" + ((function() {
        var _i, _len, _ref, _results;
        _ref = this.factors;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          f = _ref[_i];
          _results.push(f.toString());
        }
        return _results;
      }).call(this)).join(" && ") + ")";
    };

    return AND;

  })(Expr);

  OR = (function(_super) {
    __extends(OR, _super);

    function OR() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.terms = args;
    }

    OR.prototype.toString = function() {
      var t;
      return "(" + ((function() {
        var _i, _len, _ref, _results;
        _ref = this.terms;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          t = _ref[_i];
          _results.push(t.toString());
        }
        return _results;
      }).call(this)).join(" || ") + ")";
    };

    return OR;

  })(Expr);

  exports.parse = parse = function(s) {
    var parser;
    parser = new Parser;
    parser.yy = {
      URI: URI,
      OR: OR,
      AND: AND
    };
    return console.log(parser.parse(s).toString());
  };

  parse("web://foo.com && http://nutflex.com && (reddit://maxtaco || twitter://maxtaco) && keybase://max && fingerprint://8EFBE2E4DD56B35273634E8F6052B2AD31A6631C");

}).call(this);
