// Generated by IcedCoffeeScript 1.7.1-f
(function() {
  var C, Leaf, Parser, Triple;

  C = require('../constants');

  exports.Triple = Triple = (function() {
    function Triple(_arg) {
      this.seqno = _arg.seqno, this.payload_hash = _arg.payload_hash, this.sig_id = _arg.sig_id;
    }

    Triple.prototype.to_json = function() {
      return [this.seqno, this.payload_hash, this.sig_id];
    };

    return Triple;

  })();

  Parser = (function() {
    function Parser(val) {
      this.val = val;
    }

    Parser.prototype.parse = function() {
      var version;
      if (!Array.isArray(this.val) || this.val.length < 2) {
        throw new Error("Expected an array of length 2 or more");
      } else if (typeof this.val[0] !== 'number') {
        throw new Error("Need a number for first slot");
      } else if (typeof this.val[1] === 'string') {
        version = 1;
      } else {
        version = this.val[0];
      }
      switch (version) {
        case C.versions.leaf.v1:
          return this.parse_v1();
        case C.versions.leaf.v2:
          return this.parse_v2();
        default:
          throw new Error("unknown leaf version: " + version);
      }
    };

    Parser.prototype.parse_v1 = function() {
      var pub;
      pub = this.parse_triple(this.val);
      return new Leaf({
        pub: pub
      });
    };

    Parser.prototype.parse_v2 = function() {
      var pub, semipriv, _ref;
      if (this.val.length < 2) {
        throw new Error("No public chain");
      }
      pub = this.parse_triple(this.val[1]);
      semipriv = (this.val.length > 2) && ((_ref = this.val[2]) != null ? _ref.length : void 0) ? this.parse_triple(this.val[2]) : null;
      return new Leaf({
        pub: pub,
        semipriv: semipriv
      });
    };

    Parser.prototype.match_hex = function(s) {
      return (typeof s === 'string') && !!(s.match(/^([a-fA-F0-9]*)$/)) && (s.length % 2 === 0);
    };

    Parser.prototype.parse_triple = function(val) {
      var msg;
      msg = val.length < 2 ? "Bad triple with < 2 values" : val.length > 3 ? "Bad triple with > 3 values" : typeof val[0] !== 'number' ? "Bad sequence #" : !this.match_hex(val[1]) ? "bad value[1]" : val.length > 2 && val[2].length && !this.match_hex(val[2]) ? "bad value[2]" : null;
      if (msg != null) {
        throw new Error(msg);
      }
      return new Triple({
        seqno: val[0],
        payload_hash: val[1],
        sig_id: val[2]
      });
    };

    return Parser;

  })();

  exports.Leaf = Leaf = (function() {
    function Leaf(_arg) {
      this.pub = _arg.pub, this.semipriv = _arg.semipriv;
    }

    Leaf.prototype.get_public = function() {
      return this.pub;
    };

    Leaf.prototype.get_semiprivate = function() {
      return this.semipriv;
    };

    Leaf.prototype.to_json = function() {
      return [C.versions.leaf.v2, this.pub.to_json(), (this.priv != null ? this.priv.to_json() : null)];
    };

    Leaf.prototype.to_string = function() {
      return JSON.stringify(this.to_json());
    };

    Leaf.parse = function(version, val) {
      var e, err, leaf, parser;
      parser = new Parser(version, val);
      err = leaf = null;
      try {
        leaf = parser.parse();
      } catch (_error) {
        e = _error;
        err = e;
      }
      return [err, leaf];
    };

    return Leaf;

  })();

}).call(this);
